// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cekong.proto

#include "cekong.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR MyMessageBody::MyMessageBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_time_)*/uint64_t{0u}
  , /*decltype(_impl_.device_status_)*/0u
  , /*decltype(_impl_.azimuth_)*/0
  , /*decltype(_impl_.elevation_)*/0
  , /*decltype(_impl_.azimuth_offset_)*/0
  , /*decltype(_impl_.elevation_offset_)*/0
  , /*decltype(_impl_.velocity_)*/0
  , /*decltype(_impl_.distance_)*/0u
  , /*decltype(_impl_.brightness_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MyMessageBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyMessageBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyMessageBodyDefaultTypeInternal() {}
  union {
    MyMessageBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyMessageBodyDefaultTypeInternal _MyMessageBody_default_instance_;
static ::_pb::Metadata file_level_metadata_cekong_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cekong_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cekong_2eproto = nullptr;

const uint32_t TableStruct_cekong_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyMessageBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyMessageBody, _impl_.current_time_),
  PROTOBUF_FIELD_OFFSET(::MyMessageBody, _impl_.device_status_),
  PROTOBUF_FIELD_OFFSET(::MyMessageBody, _impl_.azimuth_),
  PROTOBUF_FIELD_OFFSET(::MyMessageBody, _impl_.elevation_),
  PROTOBUF_FIELD_OFFSET(::MyMessageBody, _impl_.azimuth_offset_),
  PROTOBUF_FIELD_OFFSET(::MyMessageBody, _impl_.elevation_offset_),
  PROTOBUF_FIELD_OFFSET(::MyMessageBody, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::MyMessageBody, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::MyMessageBody, _impl_.brightness_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MyMessageBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_MyMessageBody_default_instance_._instance,
};

const char descriptor_table_protodef_cekong_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014cekong.proto\"\312\001\n\rMyMessageBody\022\024\n\014curr"
  "ent_time\030\001 \001(\004\022\025\n\rdevice_status\030\002 \001(\r\022\017\n"
  "\007azimuth\030\003 \001(\002\022\021\n\televation\030\004 \001(\002\022\026\n\016azi"
  "muth_offset\030\005 \001(\005\022\030\n\020elevation_offset\030\006 "
  "\001(\005\022\020\n\010velocity\030\007 \001(\002\022\020\n\010distance\030\010 \001(\r\022"
  "\022\n\nbrightness\030\t \001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_cekong_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cekong_2eproto = {
    false, false, 227, descriptor_table_protodef_cekong_2eproto,
    "cekong.proto",
    &descriptor_table_cekong_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_cekong_2eproto::offsets,
    file_level_metadata_cekong_2eproto, file_level_enum_descriptors_cekong_2eproto,
    file_level_service_descriptors_cekong_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cekong_2eproto_getter() {
  return &descriptor_table_cekong_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cekong_2eproto(&descriptor_table_cekong_2eproto);

// ===================================================================

class MyMessageBody::_Internal {
 public:
};

MyMessageBody::MyMessageBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MyMessageBody)
}
MyMessageBody::MyMessageBody(const MyMessageBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MyMessageBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_time_){}
    , decltype(_impl_.device_status_){}
    , decltype(_impl_.azimuth_){}
    , decltype(_impl_.elevation_){}
    , decltype(_impl_.azimuth_offset_){}
    , decltype(_impl_.elevation_offset_){}
    , decltype(_impl_.velocity_){}
    , decltype(_impl_.distance_){}
    , decltype(_impl_.brightness_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.current_time_, &from._impl_.current_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.brightness_) -
    reinterpret_cast<char*>(&_impl_.current_time_)) + sizeof(_impl_.brightness_));
  // @@protoc_insertion_point(copy_constructor:MyMessageBody)
}

inline void MyMessageBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_time_){uint64_t{0u}}
    , decltype(_impl_.device_status_){0u}
    , decltype(_impl_.azimuth_){0}
    , decltype(_impl_.elevation_){0}
    , decltype(_impl_.azimuth_offset_){0}
    , decltype(_impl_.elevation_offset_){0}
    , decltype(_impl_.velocity_){0}
    , decltype(_impl_.distance_){0u}
    , decltype(_impl_.brightness_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MyMessageBody::~MyMessageBody() {
  // @@protoc_insertion_point(destructor:MyMessageBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MyMessageBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MyMessageBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MyMessageBody::Clear() {
// @@protoc_insertion_point(message_clear_start:MyMessageBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.current_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.brightness_) -
      reinterpret_cast<char*>(&_impl_.current_time_)) + sizeof(_impl_.brightness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyMessageBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 current_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.current_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 device_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.device_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float azimuth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float elevation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 azimuth_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.azimuth_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 elevation_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.elevation_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float velocity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 distance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 brightness = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyMessageBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyMessageBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 current_time = 1;
  if (this->_internal_current_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_current_time(), target);
  }

  // uint32 device_status = 2;
  if (this->_internal_device_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_device_status(), target);
  }

  // float azimuth = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_azimuth = this->_internal_azimuth();
  uint32_t raw_azimuth;
  memcpy(&raw_azimuth, &tmp_azimuth, sizeof(tmp_azimuth));
  if (raw_azimuth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_azimuth(), target);
  }

  // float elevation = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_elevation = this->_internal_elevation();
  uint32_t raw_elevation;
  memcpy(&raw_elevation, &tmp_elevation, sizeof(tmp_elevation));
  if (raw_elevation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_elevation(), target);
  }

  // int32 azimuth_offset = 5;
  if (this->_internal_azimuth_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_azimuth_offset(), target);
  }

  // int32 elevation_offset = 6;
  if (this->_internal_elevation_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_elevation_offset(), target);
  }

  // float velocity = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity = this->_internal_velocity();
  uint32_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_velocity(), target);
  }

  // uint32 distance = 8;
  if (this->_internal_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_distance(), target);
  }

  // int32 brightness = 9;
  if (this->_internal_brightness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_brightness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyMessageBody)
  return target;
}

size_t MyMessageBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyMessageBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 current_time = 1;
  if (this->_internal_current_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_current_time());
  }

  // uint32 device_status = 2;
  if (this->_internal_device_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_device_status());
  }

  // float azimuth = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_azimuth = this->_internal_azimuth();
  uint32_t raw_azimuth;
  memcpy(&raw_azimuth, &tmp_azimuth, sizeof(tmp_azimuth));
  if (raw_azimuth != 0) {
    total_size += 1 + 4;
  }

  // float elevation = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_elevation = this->_internal_elevation();
  uint32_t raw_elevation;
  memcpy(&raw_elevation, &tmp_elevation, sizeof(tmp_elevation));
  if (raw_elevation != 0) {
    total_size += 1 + 4;
  }

  // int32 azimuth_offset = 5;
  if (this->_internal_azimuth_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_azimuth_offset());
  }

  // int32 elevation_offset = 6;
  if (this->_internal_elevation_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_elevation_offset());
  }

  // float velocity = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity = this->_internal_velocity();
  uint32_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    total_size += 1 + 4;
  }

  // uint32 distance = 8;
  if (this->_internal_distance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_distance());
  }

  // int32 brightness = 9;
  if (this->_internal_brightness() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_brightness());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyMessageBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MyMessageBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyMessageBody::GetClassData() const { return &_class_data_; }


void MyMessageBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MyMessageBody*>(&to_msg);
  auto& from = static_cast<const MyMessageBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MyMessageBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_current_time() != 0) {
    _this->_internal_set_current_time(from._internal_current_time());
  }
  if (from._internal_device_status() != 0) {
    _this->_internal_set_device_status(from._internal_device_status());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_azimuth = from._internal_azimuth();
  uint32_t raw_azimuth;
  memcpy(&raw_azimuth, &tmp_azimuth, sizeof(tmp_azimuth));
  if (raw_azimuth != 0) {
    _this->_internal_set_azimuth(from._internal_azimuth());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_elevation = from._internal_elevation();
  uint32_t raw_elevation;
  memcpy(&raw_elevation, &tmp_elevation, sizeof(tmp_elevation));
  if (raw_elevation != 0) {
    _this->_internal_set_elevation(from._internal_elevation());
  }
  if (from._internal_azimuth_offset() != 0) {
    _this->_internal_set_azimuth_offset(from._internal_azimuth_offset());
  }
  if (from._internal_elevation_offset() != 0) {
    _this->_internal_set_elevation_offset(from._internal_elevation_offset());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity = from._internal_velocity();
  uint32_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    _this->_internal_set_velocity(from._internal_velocity());
  }
  if (from._internal_distance() != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  if (from._internal_brightness() != 0) {
    _this->_internal_set_brightness(from._internal_brightness());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyMessageBody::CopyFrom(const MyMessageBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyMessageBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyMessageBody::IsInitialized() const {
  return true;
}

void MyMessageBody::InternalSwap(MyMessageBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyMessageBody, _impl_.brightness_)
      + sizeof(MyMessageBody::_impl_.brightness_)
      - PROTOBUF_FIELD_OFFSET(MyMessageBody, _impl_.current_time_)>(
          reinterpret_cast<char*>(&_impl_.current_time_),
          reinterpret_cast<char*>(&other->_impl_.current_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyMessageBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cekong_2eproto_getter, &descriptor_table_cekong_2eproto_once,
      file_level_metadata_cekong_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MyMessageBody*
Arena::CreateMaybeMessage< ::MyMessageBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyMessageBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
